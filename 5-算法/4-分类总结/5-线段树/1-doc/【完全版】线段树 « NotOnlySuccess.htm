<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-CN"><head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>【完全版】线段树 «  NotOnlySuccess</title>

<link rel="stylesheet" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/style.css" type="text/css" media="screen">
<link rel="alternate" type="application/rss+xml" title="NotOnlySuccess RSS Feed" href="http://www.notonlysuccess.com/index.php/feed/">
<link rel="alternate" type="application/atom+xml" title="NotOnlySuccess Atom Feed" href="http://www.notonlysuccess.com/index.php/feed/atom/">
<link rel="pingback" href="http://www.notonlysuccess.com/success/xmlrpc.php">


<link rel="alternate" type="application/rss+xml" title="NotOnlySuccess » 【完全版】线段树评论Feed" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/feed/">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/quicklatex-format.css" type="text/css" media="all">
<link rel="stylesheet" id="wordpress-popular-posts-css" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/wpp.css" type="text/css" media="all">
<link rel="stylesheet" id="commentluv_style-css" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/commentluv.css" type="text/css" media="all">
<link rel="stylesheet" id="codebox-css" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/codebox.css" type="text/css" media="screen">
<link rel="stylesheet" id="wp-pagenavi-css" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/pagenavi-css.css" type="text/css" media="all">
<script src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/30933" async="" type="text/javascript"></script><script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/jquery_002.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/jquery-migrate.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var cl_settings = {"name":"author","url":"url","comment":"comment","email":"email","infopanel":null,"default_on":"on","default_on_admin":null,"cl_version":"2.92.1","images":"http:\/\/www.notonlysuccess.com\/success\/wp-content\/plugins\/commentluv\/images\/","api_url":"http:\/\/www.notonlysuccess.com\/success\/wp-admin\/admin-ajax.php","_fetch":"8063f24a0a","_info":"a9eabb037a","infoback":"white","infotext":null,"template_insert":"","logged_in":"","refer":"http:\/\/www.notonlysuccess.com\/index.php\/segment-tree-complete\/","no_url_message":"\u8f93\u5165\u7f51\u5740\uff0c\u7136\u540e\u70b9\u51fbCommentLuv\u524d\u7684\u590d\u9009\u6846\u5c31\u53ef\u4ee5\u5206\u4eab\u4f60\u7684\u6700\u65b0\u535a\u5ba2\u6587\u7ae0\u3002","no_http_message":"\u786e\u4fdd\u7f51\u5740\u524d\u9762\u6709 http:\/\/ \u5b57\u6837","no_url_logged_in_message":"\u5728\u63a7\u5236\u677f\u4e2d\u4e2a\u4eba\u8bbe\u7f6e\u9875\u9762\u66f4\u65b0\u4f60\u7684\u7f51\u7ad9\u7684\u8be6\u7ec6\u4fe1\u606f\u3002","no_info_message":"\u627e\u4e0d\u5230\u4fe1\u606f\u6216\u8005\u51fa\u9519\u3002"};
/* ]]> */
</script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/commentluv.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/comment-reply.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/jquery_003.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/jquery.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/behaviours.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/codebox.js"></script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/wp-quicklatex-frontend.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.notonlysuccess.com/success/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.notonlysuccess.com/success/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 3.6.1">
<link rel="canonical" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/">
<link rel="shortlink" href="http://www.notonlysuccess.com/?p=978">

<link rel="stylesheet" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/jquery.css" type="text/css">
<link rel="stylesheet" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/popup.css" type="text/css">
<link rel="stylesheet" type="text/css" media="all" href="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/weibo.css">
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<!-- wp thread comment 1.4.9.4.002 -->
<style type="text/css" media="screen">
.editComment, .editableComment, .textComment{
	display: inline;
}
.comment-childs{
	border: 1px solid #999;
	margin: 5px 2px 2px 4px;
	padding: 4px 2px 2px 4px;
	background-color: white;
}
.chalt{
	background-color: #E2E2E2;
}
#newcomment{
	border:1px dashed #777;width:90%;
}
#newcommentsubmit{
	color:red;
}
.adminreplycomment{
	border:1px dashed #777;
	width:99%;
	margin:4px;
	padding:4px;
}
.mvccls{
	color: #999;
}
			
</style>

<script type="text/javascript">(function() {var c = document.createElement('script'); c.type = 'text/javascript'; c.async = true;c.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.clicki.cn/boot/30933';var h = document.getElementsByTagName('script')[0]; h.parentNode.insertBefore(c, h);})();</script>
</head>
<body>

<div id="wrapper">

<div id="page">

<div id="header">
		<h1><a href="http://www.notonlysuccess.com/">NotOnlySuccess</a></h1>
		<div class="description">Battle of the Brains</div>
</div>
	<div id="content">

	
		<div class="navigation">
			<div class="alignleft">« <a href="http://www.notonlysuccess.com/index.php/2011world-finals/" rel="prev">精彩不亮丽，起落是无常</a></div>
			<div class="alignright"><a href="http://www.notonlysuccess.com/index.php/alibaba/" rel="next">2011阿里巴巴程序设计公开赛</a> »</div>
            <div class="cb"></div>
		</div>

  <div id="post-978" class="post-978 post type-post status-publish format-standard hentry category-acm">
 
<h1 class="post-title">【完全版】线段树</h1>
<div class="daa">七月 25th, 2011</div>

			<div class="entry">
				<p>很早前写的那篇线段树专辑至今一直是本博客阅读点击量最大的一片文章,当时觉得挺自豪的,还去pku打广告,但是现在我自己都不太好意思去
看那篇文章了,觉得当时的代码风格实在是太丑了,很多线段树的初学者可能就是看着这篇文章来练习的,如果不小心被我培养出了这么糟糕的风格,实在是过意不
去,正好过几天又要给集训队讲解线段树,所以决定把这些题目重新写一遍,顺便把近年我接触到的一些新题更新上去~;并且学习了splay等更高级的数据结
构后对线段树的体会有更深了一层,线段树的写法也就比以前飘逸,简洁且方便多了.<br>
<span id="more-978"></span></p>
<p>	在代码前先介绍一些我的线段树风格:</p>
<ul>
<li>maxn是题目给的最大区间,而节点数要开4倍,确切的来说节点数要开大于maxn的最小2<sup>x</sup>的两倍</li>
<li>lson和rson分辨表示结点的左儿子和右儿子,由于每次传参数的时候都固定是这几个变量,所以可以用预定于比较方便的表示</li>
<li>以前的写法是另外开两个个数组记录每个结点所表示的区间,其实这个区间不必保存,一边算一边传下去就行,只需要写函数的时候多两个参数,结合lson和rson的预定义可以很方便</li>
<li>PushUP(int rt)是把当前结点的信息更新到父结点</li>
<li>PushDown(int rt)是把当前结点的信息更新给儿子结点</li>
<li>rt表示当前子树的根(root),也就是当前所在的结点</li>
</ul>
<p>整理这些题目后我觉得线段树的题目整体上可以分成以下四个部分:</p>
<ul>
<li>
<span style="color:#ff0000">单点更新</span>:最最基础的线段树,只更新叶子节点,然后把信息用PushUP(int r)这个函数更新上来<p></p>
<ul>
<li>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166">hdu1166 敌兵布阵</a><br>
题意:O(-1)<br>
思路:O(-1)<br>
线段树功能:update:单点增减 query:区间求和<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code1'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9781"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code" id="p978code1"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
&nbsp;
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">55555</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> sum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUP<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> p,<span style="color: #0000ff;">int</span> add,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> add<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>p <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>p , add , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> update<span style="color: #008000;">(</span>p , add , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">return</span> sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> ret <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>L , R , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>R <span style="color: #000080;">&gt;</span> m<span style="color: #008000;">)</span> ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>L , R , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> ret<span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> T , n<span style="color: #008080;">;</span>
	<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>T<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> cas <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span> <span style="color: #008080;">;</span> cas <span style="color: #000080;">&lt;=</span> T <span style="color: #008080;">;</span> cas <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"Case %d:<span style="color: #000099; font-weight: bold;">\n</span>"</span>,cas<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>n<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		build<span style="color: #008000;">(</span><span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">char</span> op<span style="color: #008000;">[</span><span style="color: #0000dd;">10</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span><span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%s"</span>,op<span style="color: #008000;">)</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op<span style="color: #008000;">[</span><span style="color: #0000dd;">0</span><span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">'E'</span><span style="color: #008000;">)</span> <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">int</span> a , b<span style="color: #008080;">;</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op<span style="color: #008000;">[</span><span style="color: #0000dd;">0</span><span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">'Q'</span><span style="color: #008000;">)</span> <span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,query<span style="color: #008000;">(</span>a , b , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op<span style="color: #008000;">[</span><span style="color: #0000dd;">0</span><span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">'S'</span><span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>a , <span style="color: #000040;">-</span>b , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">else</span> update<span style="color: #008000;">(</span>a , b , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
	<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754">hdu1754 I Hate It</a><br>
题意:O(-1)<br>
思路:O(-1)<br>
线段树功能:update:单点替换 query:区间最值<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code2'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9782"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code" id="p978code2"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
&nbsp;
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">222222</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> MAX<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUP<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> max<span style="color: #008000;">(</span>MAX<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> , MAX<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> p,<span style="color: #0000ff;">int</span> sc,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> sc<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>p <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>p , sc , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> update<span style="color: #008000;">(</span>p , sc , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">return</span> MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> ret <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> ret <span style="color: #000080;">=</span> max<span style="color: #008000;">(</span>ret , query<span style="color: #008000;">(</span>L , R , lson<span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>R <span style="color: #000080;">&gt;</span> m<span style="color: #008000;">)</span> ret <span style="color: #000080;">=</span> max<span style="color: #008000;">(</span>ret , query<span style="color: #008000;">(</span>L , R , rson<span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> ret<span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> n , m<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>~<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>n,<span style="color: #000040;">&amp;</span>m<span style="color: #008000;">)</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		build<span style="color: #008000;">(</span><span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>m <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">char</span> op<span style="color: #008000;">[</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">int</span> a , b<span style="color: #008080;">;</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%s%d%d"</span>,op,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op<span style="color: #008000;">[</span><span style="color: #0000dd;">0</span><span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">'Q'</span><span style="color: #008000;">)</span> <span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,query<span style="color: #008000;">(</span>a , b , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">else</span> update<span style="color: #008000;">(</span>a , b , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1394">hdu1394 Minimum Inversion Number</a><br>
题意:求Inversion后的最小逆序数<br>
思路:用O(nlogn)复杂度求出最初逆序数后,就可以用O(1)的复杂度分别递推出其他解<br>
线段树功能:update:单点增减 query:区间求和<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code3'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9783"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code" id="p978code3"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
&nbsp;
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">5555</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> sum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUP<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> p,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">++</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>p <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>p , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> update<span style="color: #008000;">(</span>p , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">return</span> sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> ret <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>L , R , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>R <span style="color: #000080;">&gt;</span> m<span style="color: #008000;">)</span> ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>L , R , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> ret<span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> x<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> n<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>~<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>n<span style="color: #008000;">)</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		build<span style="color: #008000;">(</span><span style="color: #0000dd;">0</span> , n <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> sum <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> n <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>x<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			sum <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>x<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> , n <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">0</span> , n <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			update<span style="color: #008000;">(</span>x<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> , <span style="color: #0000dd;">0</span> , n <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000ff;">int</span> ret <span style="color: #000080;">=</span> sum<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> n <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			sum <span style="color: #000040;">+</span><span style="color: #000080;">=</span> n <span style="color: #000040;">-</span> x<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> <span style="color: #000040;">-</span> x<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
			ret <span style="color: #000080;">=</span> min<span style="color: #008000;">(</span>ret , sum<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,ret<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2795">hdu2795 Billboard</a><br>
题意:h*w的木板,放进一些1*L的物品,求每次放<b>空间能容纳且最上边</b>的位子<br>
思路:每次找到最大值的位子,然后减去L<br>
线段树功能:query:区间求最大值的位子(直接把update的操作在query里做了)<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code4'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9784"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code" id="p978code4"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
&nbsp;
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">222222</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> h , w , n<span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> MAX<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUP<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> max<span style="color: #008000;">(</span>MAX<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> , MAX<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> w<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> x,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		MAX<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">-</span><span style="color: #000080;">=</span> x<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> l<span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> ret <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>MAX<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">&gt;=</span> x<span style="color: #008000;">)</span> <span style="color: #008080;">?</span> query<span style="color: #008000;">(</span>x , lson<span style="color: #008000;">)</span> <span style="color: #008080;">:</span> query<span style="color: #008000;">(</span>x , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> ret<span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>~<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d%d"</span>,<span style="color: #000040;">&amp;</span>h,<span style="color: #000040;">&amp;</span>w,<span style="color: #000040;">&amp;</span>n<span style="color: #008000;">)</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>h <span style="color: #000080;">&gt;</span> n<span style="color: #008000;">)</span> h <span style="color: #000080;">=</span> n<span style="color: #008080;">;</span>
		build<span style="color: #008000;">(</span><span style="color: #0000dd;">1</span> , h , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>n <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">int</span> x<span style="color: #008080;">;</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>x<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>MAX<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">&lt;</span> x<span style="color: #008000;">)</span> <span style="color: #0000dd;">puts</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"-1"</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">else</span> <span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,query<span style="color: #008000;">(</span>x , <span style="color: #0000dd;">1</span> , h , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>练习<br>
<a href="http://poj.org/problem?id=2828">poj2828 Buy Tickets</a><br>
<a href="http://poj.org/problem?id=2886">poj2886 Who Gets the Most Candies?</a>
</li>
</ul>
</li>
<li>
<span style="color:#ff0000">成段更新</span>(通常这对初学者来说是一道坎),需要用到延迟标记(或者说懒惰标记),简单来说就是每次更新的时候不要更新到底,用延迟标记使得更新延迟到下次需要更新or询问到的时候<p></p>
<ul>
<li>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698">hdu1698 Just a Hook</a><br>
题意:O(-1)<br>
思路:O(-1)<br>
线段树功能:update:成段替换 (由于只query一次总区间,所以可以直接输出1结点的信息)<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code5'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9785"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code" id="p978code5"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
&nbsp;
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">111111</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> h , w , n<span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> col<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> sum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUp<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> PushDown<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt,<span style="color: #0000ff;">int</span> m<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		col<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> col<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>m <span style="color: #000040;">-</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span> <span style="color: #000040;">*</span> col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #000040;">*</span> col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUp<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> c <span style="color: #000040;">*</span> <span style="color: #008000;">(</span>r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	PushDown<span style="color: #008000;">(</span>rt , r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>R <span style="color: #000080;">&gt;</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUp<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> T , n , m<span style="color: #008080;">;</span>
	<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>T<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> cas <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span> <span style="color: #008080;">;</span> cas <span style="color: #000080;">&lt;=</span> T <span style="color: #008080;">;</span> cas <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>n,<span style="color: #000040;">&amp;</span>m<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		build<span style="color: #008000;">(</span><span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>m <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">int</span> a , b , c<span style="color: #008080;">;</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d%d"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b,<span style="color: #000040;">&amp;</span>c<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			update<span style="color: #008000;">(</span>a , b , c , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"Case %d: The total value of the hook is %d.<span style="color: #000099; font-weight: bold;">\n</span>"</span>,cas , sum<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
<a href="http://poj.org/problem?id=3468">poj3468 A Simple Problem with Integers</a><br>
题意:O(-1)<br>
思路:O(-1)<br>
线段树功能:update:成段增减 query:区间求和<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code6'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9786"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="code" id="p978code6"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
&nbsp;
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
<span style="color: #339900;">#define LL long long</span>
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">111111</span><span style="color: #008080;">;</span>
LL add<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
LL sum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUp<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> PushDown<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt,<span style="color: #0000ff;">int</span> m<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		add<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		add<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">*</span> <span style="color: #008000;">(</span>m <span style="color: #000040;">-</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">*</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%lld"</span>,<span style="color: #000040;">&amp;</span>sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUp<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		add<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
		sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> <span style="color: #008000;">(</span>LL<span style="color: #008000;">)</span>c <span style="color: #000040;">*</span> <span style="color: #008000;">(</span>r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	PushDown<span style="color: #008000;">(</span>rt , r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUp<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
LL query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">return</span> sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	PushDown<span style="color: #008000;">(</span>rt , r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	LL ret <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>L , R , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>L , R , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> ret<span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> N , Q<span style="color: #008080;">;</span>
	<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>N,<span style="color: #000040;">&amp;</span>Q<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span><span style="color: #0000dd;">1</span> , N , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>Q <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">char</span> op<span style="color: #008000;">[</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> a , b , c<span style="color: #008080;">;</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%s"</span>,op<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op<span style="color: #008000;">[</span><span style="color: #0000dd;">0</span><span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">'Q'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%lld<span style="color: #000099; font-weight: bold;">\n</span>"</span>,query<span style="color: #008000;">(</span>a , b , <span style="color: #0000dd;">1</span> , N , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #008000;">{</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d%d"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b,<span style="color: #000040;">&amp;</span>c<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			update<span style="color: #008000;">(</span>a , b , c , <span style="color: #0000dd;">1</span> , N , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
<a href="http://poj.org/problem?id=2528">poj2528 Mayor’s posters</a><br>
题意:在墙上贴海报,海报可以互相覆盖,问最后可以看见几张海报<br>
思路:这题数据范围很大,直接搞超时+超内存,需要离散化:<br>
离散化简单的来说就是只取我们<b>需要的值</b>来用,比如说区间[1000,2000],[1990,2012] 
我们用不到[-∞,999][1001,1989][1991,1999][2001,2011][2013,+∞]这些值,所以我只需要
1000,1990,2000,2012就够了,将其分别映射到0,1,2,3,在于复杂度就大大的降下来了<br>
所以离散化要保存所有需要用到的值,排序后,分别映射到1~n,这样复杂度就会小很多很多<br>
而这题的难点在于每个数字其实表示的是一个单位长度(并非一个点),这样普通的离散化会造成许多错误(包括我以前的代码,poj这题数据奇弱)<br>
给出下面两个简单的例子应该能体现普通离散化的缺陷:<br>
例子一:1-10 1-4 5-10<br>
例子二:1-10 1-4 6-10<br>
普通离散化后都变成了[1,4][1,2][3,4]<br>
线段2覆盖了[1,2],线段3覆盖了[3,4],那么线段1是否被完全覆盖掉了呢?<br>
例子一是完全被覆盖掉了,而例子二没有被覆盖<p></p>
<p>为了解决这种缺陷,我们可以在排序后的数组上加些处理,比如说[1,2,6,10]<br>
如果相邻数字间距大于1的话,在其中加上任意一个数字,比如加成[1,2,3,6,7,10],然后再做线段树就好了.<br>
线段树功能:update:成段替换 query:简单hash</p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code7'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9787"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
</pre></td><td class="code" id="p978code7"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;cstring&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
&nbsp;
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">11111</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">bool</span> hash<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> li<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span> , ri<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> X<span style="color: #008000;">[</span>maxn<span style="color: #000040;">*</span><span style="color: #0000dd;">3</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> col<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">4</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> cnt<span style="color: #008080;">;</span>
&nbsp;
<span style="color: #0000ff;">void</span> PushDown<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		col<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> col<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	PushDown<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span><span style="color: #000040;">!</span>hash<span style="color: #008000;">[</span>col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span> cnt <span style="color: #000040;">++</span><span style="color: #008080;">;</span>
		hash<span style="color: #008000;">[</span> col<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	query<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	query<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> Bin<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> key,<span style="color: #0000ff;">int</span> n,<span style="color: #0000ff;">int</span> X<span style="color: #008000;">[</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> l <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> , r <span style="color: #000080;">=</span> n <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">&lt;=</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>m<span style="color: #008000;">]</span> <span style="color: #000080;">==</span> key<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> m<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>m<span style="color: #008000;">]</span> <span style="color: #000080;">&lt;</span> key<span style="color: #008000;">)</span> l <span style="color: #000080;">=</span> m <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">else</span> r <span style="color: #000080;">=</span> m <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> T , n<span style="color: #008080;">;</span>
	<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>T<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>T <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>n<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> nn <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> n <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>li<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> , <span style="color: #000040;">&amp;</span>ri<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			X<span style="color: #008000;">[</span>nn<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> li<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
			X<span style="color: #008000;">[</span>nn<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> ri<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		sort<span style="color: #008000;">(</span>X , X <span style="color: #000040;">+</span> nn<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> nn<span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>i<span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span> X<span style="color: #008000;">[</span>m <span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> m <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&gt;</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>i<span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> X<span style="color: #008000;">[</span>m <span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>i<span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		sort<span style="color: #008000;">(</span>X , X <span style="color: #000040;">+</span> m<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000dd;">memset</span><span style="color: #008000;">(</span>col , <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">sizeof</span><span style="color: #008000;">(</span>col<span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> n <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">int</span> l <span style="color: #000080;">=</span> Bin<span style="color: #008000;">(</span>li<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>, m, X<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">int</span> r <span style="color: #000080;">=</span> Bin<span style="color: #008000;">(</span>ri<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>, m, X<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			update<span style="color: #008000;">(</span>l, r, i, <span style="color: #0000dd;">0</span>, m <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span>, <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		cnt <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000dd;">memset</span><span style="color: #008000;">(</span>hash, <span style="color: #0000ff;">false</span>, <span style="color: #0000dd;">sizeof</span><span style="color: #008000;">(</span>hash<span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		query<span style="color: #008000;">(</span><span style="color: #0000dd;">0</span>, m <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span>, <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,cnt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
<a href="http://poj.org/problem?id=3225">poj3225 Help with Intervals</a><br>
题意:区间操作,交,并,补等<br>
思路:<br>
我们一个一个操作来分析:(用0和1表示是否包含区间,-1表示该区间内既有包含又有不包含)<br>
U:把区间[l,r]覆盖成1<br>
I:把[-∞,l)(r,∞]覆盖成0<br>
D:把区间[l,r]覆盖成0<br>
C:把[-∞,l)(r,∞]覆盖成0 , 且[l,r]区间0/1互换<br>
S:[l,r]区间0/1互换<p></p>
<p>成段覆盖的操作很简单,比较特殊的就是<b>区间0/1互换</b>这个操作,我们可以称之为异或操作<br>
很明显我们可以知道这个性质:当一个区间被覆盖后,不管之前有没有异或标记都没有意义了<br>
所以当一个节点得到覆盖标记时把异或标记清空<br>
而当一个节点得到异或标记的时候,先判断覆盖标记,如果是0或1,直接改变一下覆盖标记,不然的话改变异或标记</p>
<p>开区间闭区间只要数字乘以2就可以处理(偶数表示端点,奇数表示两端点间的区间)<br>
线段树功能:update:成段替换,区间异或 query:简单hash</p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code8'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9788"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
</pre></td><td class="code" id="p978code8"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;cstring&gt;</span>
<span style="color: #339900;">#include &lt;cctype&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
&nbsp;
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">131072</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">bool</span> hash<span style="color: #008000;">[</span>maxn<span style="color: #000040;">+</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> cover<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> XOR<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> FXOR<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">^</span><span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> XOR<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">^</span><span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> PushDown<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		cover<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		XOR<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> XOR<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>XOR<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		FXOR<span style="color: #008000;">(</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		FXOR<span style="color: #008000;">(</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		XOR<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">char</span> op,<span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'U'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
			XOR<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'D'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
			XOR<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'C'</span> <span style="color: #000040;">||</span> op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'S'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			FXOR<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	PushDown<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>op , L , R , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'I'</span> <span style="color: #000040;">||</span> op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'C'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		XOR<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>op , L , R , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'I'</span> <span style="color: #000040;">||</span> op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'C'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		XOR<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> it <span style="color: #000080;">=</span> l <span style="color: #008080;">;</span> it <span style="color: #000080;">&lt;=</span> r <span style="color: #008080;">;</span> it <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			hash<span style="color: #008000;">[</span>it<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #0000dd;">0</span><span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
<span style="color: #666666;">//	if (l == r) return ; // the leaf node never be -1</span>
	PushDown<span style="color: #008000;">(</span>rt<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	query<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	query<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	cover<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> XOR<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">char</span> op , l , r<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> a , b<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span> ~<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%c %c%d,%d%c<span style="color: #000099; font-weight: bold;">\n</span>"</span>,<span style="color: #000040;">&amp;</span>op , <span style="color: #000040;">&amp;</span>l , <span style="color: #000040;">&amp;</span>a , <span style="color: #000040;">&amp;</span>b , <span style="color: #000040;">&amp;</span>r<span style="color: #008000;">)</span> <span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		a <span style="color: #000080;">&lt;&lt;=</span> <span style="color: #0000dd;">1</span> , b <span style="color: #000080;">&lt;&lt;=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> <span style="color: #FF0000;">'('</span><span style="color: #008000;">)</span> a <span style="color: #000040;">++</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>r <span style="color: #000080;">==</span> <span style="color: #FF0000;">')'</span><span style="color: #008000;">)</span> b <span style="color: #000040;">--</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>a <span style="color: #000080;">&gt;</span> b<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'C'</span> <span style="color: #000040;">||</span> op <span style="color: #000080;">==</span> <span style="color: #FF0000;">'I'</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
				cover<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> XOR<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
			<span style="color: #008000;">}</span>
		<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> update<span style="color: #008000;">(</span>op , a , b , <span style="color: #0000dd;">0</span> , maxn , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	query<span style="color: #008000;">(</span><span style="color: #0000dd;">0</span> , maxn , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">bool</span> flag <span style="color: #000080;">=</span> <span style="color: #0000ff;">false</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> s <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span> , e<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;=</span> maxn <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>hash<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>s <span style="color: #000080;">==</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> s <span style="color: #000080;">=</span> i<span style="color: #008080;">;</span>
			e <span style="color: #000080;">=</span> i<span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>s <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
				<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>flag<span style="color: #008000;">)</span> <span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">" "</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
				flag <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008080;">;</span>
				<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%c%d,%d%c"</span>,s<span style="color: #000040;">&amp;</span><span style="color: #0000dd;">1</span><span style="color: #008080;">?</span><span style="color: #FF0000;">'('</span><span style="color: #008080;">:</span><span style="color: #FF0000;">'['</span> , s<span style="color: #000080;">&gt;&gt;</span><span style="color: #0000dd;">1</span> , <span style="color: #008000;">(</span>e<span style="color: #000040;">+</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #000080;">&gt;&gt;</span><span style="color: #0000dd;">1</span> , e<span style="color: #000040;">&amp;</span><span style="color: #0000dd;">1</span><span style="color: #008080;">?</span><span style="color: #FF0000;">')'</span><span style="color: #008080;">:</span><span style="color: #FF0000;">']'</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
				s <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
			<span style="color: #008000;">}</span>
		<span style="color: #008000;">}</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span><span style="color: #000040;">!</span>flag<span style="color: #008000;">)</span> <span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"empty set"</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000dd;">puts</span><span style="color: #008000;">(</span><span style="color: #FF0000;">""</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>练习<br>
<a href="http://poj.org/problem?id=1436">poj1436 Horizontally Visible Segments</a><br>
<a href="http://poj.org/problem?id=2991">poj2991 Crane</a><br>
<a href="http://acm.uestc.edu.cn/problem.php?pid=1425">Another LCIS</a><br>
<a href="http://acm.uestc.edu.cn/problem.php?pid=1546">Bracket Sequence</a> </li>
</ul>
</li>
<li>
<span style="color:#ff0000">区间合并</span><br>
这类题目会询问区间中满足条件的连续最长区间,所以PushUp的时候需要对左右儿子的区间进行合并<p></p>
<ul>
<li>
<a href="http://poj.org/problem?id=3667">poj3667 Hotel</a><br>
题意:1 a:询问是不是有连续长度为a的空房间,有的话住进最左边<br>
     2 a b:将[a,a+b-1]的房间清空<br>
思路:记录区间中最长的空房间<br>
线段树操作:update:区间替换 query:询问满足条件的最左断点<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code9'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p9789"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
</pre></td><td class="code" id="p978code9"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;cstring&gt;</span>
<span style="color: #339900;">#include &lt;cctype&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
&nbsp;
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">55555</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> lsum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span> , rsum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span> , msum<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> cover<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
&nbsp;
<span style="color: #0000ff;">void</span> PushDown<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt,<span style="color: #0000ff;">int</span> m<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		cover<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		msum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #008080;">?</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">:</span> m <span style="color: #000040;">-</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		msum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #008080;">?</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">:</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> PushUp<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt,<span style="color: #0000ff;">int</span> m<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	lsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	rsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>lsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">==</span> m <span style="color: #000040;">-</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>rsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">==</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	msum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> max<span style="color: #008000;">(</span>lsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> , max<span style="color: #008000;">(</span>msum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> , msum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> build<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	msum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span>rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		msum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> c <span style="color: #008080;">?</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">:</span> r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		cover<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	PushDown<span style="color: #008000;">(</span>rt , r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUp<span style="color: #008000;">(</span>rt , r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> query<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> w,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> l<span style="color: #008080;">;</span>
	PushDown<span style="color: #008000;">(</span>rt , r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>msum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">&gt;=</span> w<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> query<span style="color: #008000;">(</span>w , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> lsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">&gt;=</span> w<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> m <span style="color: #000040;">-</span> rsum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">return</span> query<span style="color: #008000;">(</span>w , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> n , m<span style="color: #008080;">;</span>
	<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>n,<span style="color: #000040;">&amp;</span>m<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	build<span style="color: #008000;">(</span><span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>m <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">int</span> op , a , b<span style="color: #008080;">;</span>
		<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>op<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>op <span style="color: #000080;">==</span> <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>a<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>msum<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000080;">&lt;</span> a<span style="color: #008000;">)</span> <span style="color: #0000dd;">puts</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"0"</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">else</span> <span style="color: #008000;">{</span>
				<span style="color: #0000ff;">int</span> p <span style="color: #000080;">=</span> query<span style="color: #008000;">(</span>a , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
				<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,p<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
				update<span style="color: #008000;">(</span>p , p <span style="color: #000040;">+</span> a <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #008000;">}</span>
		<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #008000;">{</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			update<span style="color: #008000;">(</span>a , a <span style="color: #000040;">+</span> b <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">0</span> , <span style="color: #0000dd;">1</span> , n , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>练习<br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3308">hdu3308 LCIS</a><br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3397">hdu3397 Sequence operation</a><br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2871">hdu2871 Memory Control</a><br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1540">hdu1540 Tunnel Warfare</a><br>
<a href="http://www.codeforces.com/problemset/problem/46/D">CF46-D Parking Lot</a></li>
</ul>
</li>
<li>
<span style="color:#ff0000">扫描线</span><br>
这类题目需要将一些操作排序,然后从左到右用一根扫描线(当然是在我们脑子里)扫过去<br>
最典型的就是矩形面积并,周长并等题<p></p>
<ul>
<li>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542">hdu1542 Atlantis</a><br>
题意:矩形面积并<br>
思路:浮点数先要离散化;然后把矩形分成两条边,上边和下边,对横轴建树,然后从下到上扫描上去,用cnt表示该区间下边比上边多几个,sum代表该区间内被覆盖的线段的长度总和<br>
这里线段树的一个结点并非是线段的一个端点,而是该端点和下一个端点间的线段,所以题目中r+1,r-1的地方可以自己好好的琢磨一下<br>
线段树操作:update:区间增减 query:直接取根节点的值<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code10'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p97810"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
</pre></td><td class="code" id="p978code10"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;cstring&gt;</span>
<span style="color: #339900;">#include &lt;cctype&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
&nbsp;
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">2222</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> cnt<span style="color: #008000;">[</span>maxn <span style="color: #000080;">&lt;&lt;</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">double</span> sum<span style="color: #008000;">[</span>maxn <span style="color: #000080;">&lt;&lt;</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">double</span> X<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">struct</span> Seg <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">double</span> h , l , r<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">int</span> s<span style="color: #008080;">;</span>
	Seg<span style="color: #008000;">(</span><span style="color: #008000;">)</span><span style="color: #008000;">{</span><span style="color: #008000;">}</span>
	Seg<span style="color: #008000;">(</span><span style="color: #0000ff;">double</span> a,<span style="color: #0000ff;">double</span> b,<span style="color: #0000ff;">double</span> c,<span style="color: #0000ff;">int</span> d<span style="color: #008000;">)</span> <span style="color: #008080;">:</span> l<span style="color: #008000;">(</span>a<span style="color: #008000;">)</span> , r<span style="color: #008000;">(</span>b<span style="color: #008000;">)</span> , h<span style="color: #008000;">(</span>c<span style="color: #008000;">)</span> , s<span style="color: #008000;">(</span>d<span style="color: #008000;">)</span> <span style="color: #008000;">{</span><span style="color: #008000;">}</span>
	<span style="color: #0000ff;">bool</span> operator <span style="color: #000080;">&lt;</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">const</span> Seg <span style="color: #000040;">&amp;</span>cmp<span style="color: #008000;">)</span> <span style="color: #0000ff;">const</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">return</span> h <span style="color: #000080;">&lt;</span> cmp.<span style="color: #007788;">h</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>ss<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUp<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cnt<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span> sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>r<span style="color: #000040;">+</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">-</span> X<span style="color: #008000;">[</span>l<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">else</span> sum<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> sum<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		cnt<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
		PushUp<span style="color: #008000;">(</span>rt , l , r<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUp<span style="color: #008000;">(</span>rt , l , r<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> Bin<span style="color: #008000;">(</span><span style="color: #0000ff;">double</span> key,<span style="color: #0000ff;">int</span> n,<span style="color: #0000ff;">double</span> X<span style="color: #008000;">[</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> l <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> , r <span style="color: #000080;">=</span> n <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">&lt;=</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>m<span style="color: #008000;">]</span> <span style="color: #000080;">==</span> key<span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> m<span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>m<span style="color: #008000;">]</span> <span style="color: #000080;">&lt;</span> key<span style="color: #008000;">)</span> l <span style="color: #000080;">=</span> m <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">else</span> r <span style="color: #000080;">=</span> m <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> n , cas <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>~<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>n<span style="color: #008000;">)</span> <span style="color: #000040;">&amp;&amp;</span> n<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>n <span style="color: #000040;">--</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">double</span> a , b , c , d<span style="color: #008080;">;</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%lf%lf%lf%lf"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b,<span style="color: #000040;">&amp;</span>c,<span style="color: #000040;">&amp;</span>d<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			X<span style="color: #008000;">[</span>m<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> a<span style="color: #008080;">;</span>
			ss<span style="color: #008000;">[</span>m<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> Seg<span style="color: #008000;">(</span>a , c , b , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			X<span style="color: #008000;">[</span>m<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
			ss<span style="color: #008000;">[</span>m<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> Seg<span style="color: #008000;">(</span>a , c , d , <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		sort<span style="color: #008000;">(</span>X , X <span style="color: #000040;">+</span> m<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		sort<span style="color: #008000;">(</span>ss , ss <span style="color: #000040;">+</span> m<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> k <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> m <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>X<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>i<span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span> X<span style="color: #008000;">[</span>k<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> X<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000dd;">memset</span><span style="color: #008000;">(</span>cnt , <span style="color: #0000dd;">0</span> , <span style="color: #0000dd;">sizeof</span><span style="color: #008000;">(</span>cnt<span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000dd;">memset</span><span style="color: #008000;">(</span>sum , <span style="color: #0000dd;">0</span> , <span style="color: #0000dd;">sizeof</span><span style="color: #008000;">(</span>sum<span style="color: #008000;">)</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">double</span> ret <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> m <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">int</span> l <span style="color: #000080;">=</span> Bin<span style="color: #008000;">(</span>ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">l</span> , k , X<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">int</span> r <span style="color: #000080;">=</span> Bin<span style="color: #008000;">(</span>ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">r</span> , k , X<span style="color: #008000;">)</span> <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">&lt;=</span> r<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>l , r , ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">s</span> , <span style="color: #0000dd;">0</span> , k <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span>, <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> sum<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">*</span> <span style="color: #008000;">(</span>ss<span style="color: #008000;">[</span>i<span style="color: #000040;">+</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span>.<span style="color: #007788;">h</span> <span style="color: #000040;">-</span> ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">h</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"Test case #%d<span style="color: #000099; font-weight: bold;">\n</span>Total explored area: %.2lf<span style="color: #000099; font-weight: bold;">\n</span><span style="color: #000099; font-weight: bold;">\n</span>"</span>,cas<span style="color: #000040;">++</span> , ret<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1828">hdu1828 Picture</a><br>
题意:矩形周长并<br>
思路:与面积不同的地方是还要记录竖的边有几个(numseg记录),并且当边界重合的时候需要合并(用lbd和rbd表示边界来辅助)<br>
线段树操作:update:区间增减 query:直接取根节点的值<p></p>

<div class="wp_codebox_msgheader wp_codebox_hide active"><span class="right"><sup><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" target="_blank" title="WP-CodeBox HowTo?"><span style="color: #99cc00">?</span></a></sup></span><span class="left"><a href="javascript:;" onclick="javascript:showCodeTxt('p978code11'); return false;">View Code</a> CPP</span><div class="codebox_clear"></div></div><div style="display: none;" class="wp_codebox"><table><tbody><tr id="p97811"><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="code" id="p978code11"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#include &lt;cstdio&gt;</span>
<span style="color: #339900;">#include &lt;cstring&gt;</span>
<span style="color: #339900;">#include &lt;cctype&gt;</span>
<span style="color: #339900;">#include &lt;algorithm&gt;</span>
<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>
<span style="color: #339900;">#define lson l , m , rt &lt;&lt; 1</span>
<span style="color: #339900;">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span>
&nbsp;
<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> maxn <span style="color: #000080;">=</span> <span style="color: #0000dd;">22222</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">struct</span> Seg<span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> l , r , h , s<span style="color: #008080;">;</span>
	Seg<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span><span style="color: #008000;">}</span>
	Seg<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> a,<span style="color: #0000ff;">int</span> b,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> d<span style="color: #008000;">)</span><span style="color: #008080;">:</span>l<span style="color: #008000;">(</span>a<span style="color: #008000;">)</span> , r<span style="color: #008000;">(</span>b<span style="color: #008000;">)</span> , h<span style="color: #008000;">(</span>c<span style="color: #008000;">)</span> , s<span style="color: #008000;">(</span>d<span style="color: #008000;">)</span> <span style="color: #008000;">{</span><span style="color: #008000;">}</span>
	<span style="color: #0000ff;">bool</span> operator <span style="color: #000080;">&lt;</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">const</span> Seg <span style="color: #000040;">&amp;</span>cmp<span style="color: #008000;">)</span> <span style="color: #0000ff;">const</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>h <span style="color: #000080;">==</span> cmp.<span style="color: #007788;">h</span><span style="color: #008000;">)</span> <span style="color: #0000ff;">return</span> s <span style="color: #000080;">&gt;</span> cmp.<span style="color: #007788;">s</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> h <span style="color: #000080;">&lt;</span> cmp.<span style="color: #007788;">h</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>ss<span style="color: #008000;">[</span>maxn<span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">bool</span> lbd<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span> , rbd<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> numseg<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> cnt<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">int</span> len<span style="color: #008000;">[</span>maxn<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">2</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
<span style="color: #0000ff;">void</span> PushUP<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> rt,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>cnt<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		lbd<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rbd<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		len<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> r <span style="color: #000040;">-</span> l <span style="color: #000040;">+</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
		numseg<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">2</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>l <span style="color: #000080;">==</span> r<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		len<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> numseg<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lbd<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rbd<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span> <span style="color: #0000ff;">else</span> <span style="color: #008000;">{</span>
		lbd<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> lbd<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		rbd<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> rbd<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		len<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> len<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> len<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		numseg<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000080;">=</span> numseg<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">+</span> numseg<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>lbd<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #000040;">|</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">&amp;&amp;</span> rbd<span style="color: #008000;">[</span>rt<span style="color: #000080;">&lt;&lt;</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008000;">)</span> numseg<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">-</span><span style="color: #000080;">=</span> <span style="color: #0000dd;">2</span><span style="color: #008080;">;</span><span style="color: #666666;">//两条线重合</span>
	<span style="color: #008000;">}</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">void</span> update<span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> L,<span style="color: #0000ff;">int</span> R,<span style="color: #0000ff;">int</span> c,<span style="color: #0000ff;">int</span> l,<span style="color: #0000ff;">int</span> r,<span style="color: #0000ff;">int</span> rt<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> l <span style="color: #000040;">&amp;&amp;</span> r <span style="color: #000080;">&lt;=</span> R<span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		cnt<span style="color: #008000;">[</span>rt<span style="color: #008000;">]</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> c<span style="color: #008080;">;</span>
		PushUP<span style="color: #008000;">(</span>rt , l , r<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">return</span> <span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #008000;">(</span>l <span style="color: #000040;">+</span> r<span style="color: #008000;">)</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #0000dd;">1</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>L <span style="color: #000080;">&lt;=</span> m<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , lson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>m <span style="color: #000080;">&lt;</span> R<span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>L , R , c , rson<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	PushUP<span style="color: #008000;">(</span>rt , l , r<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span>
<span style="color: #0000ff;">int</span> main<span style="color: #008000;">(</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
	<span style="color: #0000ff;">int</span> n<span style="color: #008080;">;</span>
	<span style="color: #0000ff;">while</span> <span style="color: #008000;">(</span>~<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d"</span>,<span style="color: #000040;">&amp;</span>n<span style="color: #008000;">)</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
		<span style="color: #0000ff;">int</span> m <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> lbd <span style="color: #000080;">=</span> <span style="color: #0000dd;">10000</span>, rbd <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">10000</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> n <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">int</span> a , b , c , d<span style="color: #008080;">;</span>
			<span style="color: #0000dd;">scanf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d%d%d%d"</span>,<span style="color: #000040;">&amp;</span>a,<span style="color: #000040;">&amp;</span>b,<span style="color: #000040;">&amp;</span>c,<span style="color: #000040;">&amp;</span>d<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			lbd <span style="color: #000080;">=</span> min<span style="color: #008000;">(</span>lbd , a<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			rbd <span style="color: #000080;">=</span> max<span style="color: #008000;">(</span>rbd , c<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			ss<span style="color: #008000;">[</span>m<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> Seg<span style="color: #008000;">(</span>a , c , b , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			ss<span style="color: #008000;">[</span>m<span style="color: #000040;">++</span><span style="color: #008000;">]</span> <span style="color: #000080;">=</span> Seg<span style="color: #008000;">(</span>a , c , d , <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		sort<span style="color: #008000;">(</span>ss , ss <span style="color: #000040;">+</span> m<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">int</span> ret <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> , last <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
		<span style="color: #0000ff;">for</span> <span style="color: #008000;">(</span><span style="color: #0000ff;">int</span> i <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span> <span style="color: #008080;">;</span> i <span style="color: #000080;">&lt;</span> m <span style="color: #008080;">;</span> i <span style="color: #000040;">++</span><span style="color: #008000;">)</span> <span style="color: #008000;">{</span>
			<span style="color: #0000ff;">if</span> <span style="color: #008000;">(</span>ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">l</span> <span style="color: #000080;">&lt;</span> ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">r</span><span style="color: #008000;">)</span> update<span style="color: #008000;">(</span>ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">l</span> , ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">r</span> <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">s</span> , lbd , rbd <span style="color: #000040;">-</span> <span style="color: #0000dd;">1</span> , <span style="color: #0000dd;">1</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> numseg<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">*</span> <span style="color: #008000;">(</span>ss<span style="color: #008000;">[</span>i<span style="color: #000040;">+</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span>.<span style="color: #007788;">h</span> <span style="color: #000040;">-</span> ss<span style="color: #008000;">[</span>i<span style="color: #008000;">]</span>.<span style="color: #007788;">h</span><span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			ret <span style="color: #000040;">+</span><span style="color: #000080;">=</span> <span style="color: #0000dd;">abs</span><span style="color: #008000;">(</span>len<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span> <span style="color: #000040;">-</span> last<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
			last <span style="color: #000080;">=</span> len<span style="color: #008000;">[</span><span style="color: #0000dd;">1</span><span style="color: #008000;">]</span><span style="color: #008080;">;</span>
		<span style="color: #008000;">}</span>
		<span style="color: #0000dd;">printf</span><span style="color: #008000;">(</span><span style="color: #FF0000;">"%d<span style="color: #000099; font-weight: bold;">\n</span>"</span>,ret<span style="color: #008000;">)</span><span style="color: #008080;">;</span>
	<span style="color: #008000;">}</span>
	<span style="color: #0000ff;">return</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>
<span style="color: #008000;">}</span></pre></td></tr></tbody></table></div>

</li>
<li>练习<br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3265">hdu3265 Posters</a><br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3642">hdu3642 Get The Treasury</a><br>
<a href="http://poj.org/problem?id=2482">poj2482 Stars in Your Window</a><br>
<a href="http://poj.org/problem?id=2464">poj2464 Brownie Points II</a><br>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3255">hdu3255 Farming </a><br>
<a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1707">ural1707 Hypnotoad's Secret</a><br>
<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=229&amp;page=show_problem&amp;problem=3134">uva11983 Weird Advertisement</a>
</li>
</ul>
</li>
</ul>
<p>线段树与其他结合练习(欢迎大家补充):</p>
<ul>
<li> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3954">hdu3954 Level up</a> </li>
<li> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4027">hdu4027 Can you answer these queries?</a> </li>
<li> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3333">hdu3333 Turing Tree</a> </li>
<li> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3874">hdu3874 Necklace</a> </li>
<li> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3016">hdu3016 Man Down</a> </li>
<li> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3340">hdu3340 Rain in ACStar</a> </li>
<li> <a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3511">zju3511 Cake Robbery</a> </li>
<li> <a href="http://acm.uestc.edu.cn/problem.php?pid=1558">UESTC1558 Charitable Exchange</a> </li>
<li> <a href="http://www.codeforces.com/problemset/problem/85/D">CF85-D Sum of Medians</a> </li>
<li> <a href="http://www.spoj.pl/problems/GSS2/">spojGSS2 Can you answer these queries II</a> </li>
</ul>

								
				<p class="postmetadata alt">
					<small>
						This entry was posted
												on 星期一, 七月 25th, 2011 at 12:54						and is filed under <a href="http://www.notonlysuccess.com/index.php/category/acm/" title="查看ACM中的全部文章" rel="category tag">ACM</a>.
						You can follow any responses to this entry through the <a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/feed/">RSS 2.0</a> feed.

													You can <a href="#respond">leave a response</a>, or <a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/trackback/" rel="trackback">trackback</a> from your own site.

						
					</small>
				</p>

			</div>
		</div>

	
<!-- You can start editing here. -->

	<h3 id="comments">204 Responses to “【完全版】线段树”</h3>

	<div class="navigation">
		<div class="alignleft"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-2/#comments">« 先前评论</a></div>
		<div class="alignright"></div>
	</div>

	<ol class="commentlist">
			<li class="pingback even thread-even depth-1" id="comment-5337">
				<div id="div-comment-5337" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://www.kaifazhe.com/programming/390781.html" rel="external nofollow" class="url">线段树练习_入门 - 编程 - 开发者</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5337">
			2014/03/1712:23</a>		</div>

		<p>[…] 学习资源：nutonlysuccess […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5337#respond" onclick='return addComment.moveForm("div-comment-5337", "5337", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-5336">
				<div id="div-comment-5336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://energycen.com/2012/07/23/ac%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e7%ba%bf%e6%ae%b5%e6%a0%91-hdu1166-%e6%95%8c%e5%85%b5%e5%b8%83%e9%98%b5/" rel="external nofollow" class="url">AC的第一个线段树 HDU1166 敌兵布阵</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5336">
			2014/03/1400:51</a>		</div>

		<p>[…] 
线段树可以看成是完全二叉树（可能有些节点下没了子节点破坏了整体的结构，但是在数组的处理时，还是可以当做完全二叉树，因此rt的左儿子就是
rt&lt;&lt;1右儿子就是(rt&lt;&lt;1)+1）这么做比存一个结构体然后记录左右儿子的下标要节省空间……是看了
notonlysuccess的线段树完整版之后才知道能这么办的，膜拜一下大神 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5336#respond" onclick='return addComment.moveForm("div-comment-5336", "5336", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1" id="comment-5335">
				<div id="div-comment-5335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://energycen.com/2012/07/25/poj-3225-help-with-intervals-%e7%ba%bf%e6%ae%b5%e6%a0%91-%e9%9b%86%e5%90%88%e7%9a%84%e4%ba%a4%e5%b9%b6%e5%b7%ae%e8%a1%a5%e8%bf%90%e7%ae%97/" rel="external nofollow" class="url">poj 3225 Help with Intervals 线段树 集合的交并差补运算</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5335">
			2014/03/1400:36</a>		</div>

		<p>[…] 首先，如何简单处理开区间和闭区间的问题？我是看了notonlysuccess大神的方法才知道的 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5335#respond" onclick='return addComment.moveForm("div-comment-5335", "5335", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-5334">
				<div id="div-comment-5334" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://www.energycen.com/2012/07/23/ac%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e7%ba%bf%e6%ae%b5%e6%a0%91-hdu1166-%e6%95%8c%e5%85%b5%e5%b8%83%e9%98%b5/" rel="external nofollow" class="url">AC的第一个线段树 HDU1166 敌兵布阵 | 独乐</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5334">
			2014/03/1316:37</a>		</div>

		<p>[…] 
线段树可以看成是完全二叉树（可能有些节点下没了子节点破坏了整体的结构，但是在数组的处理时，还是可以当做完全二叉树，因此rt的左儿子就是
rt&lt;&lt;1右儿子就是(rt&lt;&lt;1)+1）这么做比存一个结构体然后记录左右儿子的下标要节省空间……是看了
notonlysuccess的线段树完整版之后才知道能这么办的，膜拜一下大神 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5334#respond" onclick='return addComment.moveForm("div-comment-5334", "5334", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1" id="comment-5333">
				<div id="div-comment-5333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://www.energycen.com/2012/07/25/poj-3225-help-with-intervals-%e7%ba%bf%e6%ae%b5%e6%a0%91-%e9%9b%86%e5%90%88%e7%9a%84%e4%ba%a4%e5%b9%b6%e5%b7%ae%e8%a1%a5%e8%bf%90%e7%ae%97/" rel="external nofollow" class="url">poj 3225 Help with Intervals 线段树 集合的交并差补运算 | 独乐</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5333">
			2014/03/1316:36</a>		</div>

		<p>[…] 首先，如何简单处理开区间和闭区间的问题？我是看了notonlysuccess大神的方法才知道的 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5333#respond" onclick='return addComment.moveForm("div-comment-5333", "5333", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-5331">
				<div id="div-comment-5331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://plumrain.org/segment-tree/" rel="external nofollow" class="url">线段树小结 | Plumrain</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5331">
			2014/03/0602:04</a>		</div>

		<p>[…] 3、HDU 3642 Get The Treasury：比较复杂的题，看了题感觉是枚举+矩形面积交。。。然后就没写了。。。具体看NotOnlySuccess的题解吧。点击打开链接。 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5331#respond" onclick='return addComment.moveForm("div-comment-5331", "5331", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1" id="comment-5330">
				<div id="div-comment-5330" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://plumrain.org/hdu-1828/" rel="external nofollow" class="url">hdu 1828 题解 | Plumrain</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5330">
			2014/03/0501:12</a>		</div>

		<p>[…] 解法：嗯。。。这题我是完全根据胡浩的博客NotOnlySuccess上面的线段树专题学习的。。。偷个懒，下面直接给出他的专题链接。。。。点击此处查看。 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5330#respond" onclick='return addComment.moveForm("div-comment-5330", "5330", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-5329">
				<div id="div-comment-5329" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://plumrain.org/hdu-1542-atlantis/" rel="external nofollow" class="url">hdu 1542 题解 | Plumrain</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5329">
			2014/03/0501:08</a>		</div>

		<p>[…] 解法：扫描线+线段树。我是完全按照胡浩大牛的博客NotOnlySuccess上面写的题解学得。。偷个懒不写题解了，这里给个他的题解链接。。。点击此处查看。 […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5329#respond" onclick='return addComment.moveForm("div-comment-5329", "5329", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-5316">
				<div id="div-comment-5316" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/a.png" class="avatar avatar-32 photo avatar-default" height="32" width="32">			<cite class="fn">匿名</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5316">
			2013/12/1616:06</a>		</div>

		<p>hh大神 就是 如果按照您的这种线段树 能不能拿看下 hdu1119怎么做啊</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,5316,1,'');">回复</a>]</p>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5316#respond" onclick='return addComment.moveForm("div-comment-5316", "5316", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-5303">
				<div id="div-comment-5303" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/91af407864e954a1cd285953a40f3b40.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn"><a href="http://www.qq.com/" rel="external nofollow" class="url">Panamera</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5303">
			2013/12/0713:07</a>		</div>

		<p>想问下大神，为什么线段树的查询都是从1到n，从0到n-1不可以吗？？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,5303,1,'Panamera');">回复</a>]</p>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5303#respond" onclick='return addComment.moveForm("div-comment-5303", "5303", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-5302">
				<div id="div-comment-5302" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/91af407864e954a1cd285953a40f3b40.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">Panamera</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5302">
			2013/12/0713:05</a>		</div>

		<p>想问下，大神，为什么线段树的查询是从1到n，从0到n-1不可以吗？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,5302,1,'Panamera');">回复</a>]</p>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5302#respond" onclick='return addComment.moveForm("div-comment-5302", "5302", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-5250">
				<div id="div-comment-5250" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://www.w3c.com.cn/hdu-3397-sequence-operation" rel="external nofollow" class="url">hdu 3397 Sequence operation - 编程语言 - 开发者第2315456个问答</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5250">
			2013/10/1609:21</a>		</div>

		<p>[…] &nbsp; 所以我们就要记录 &nbsp;最长1的 &nbsp; 这一点我给个傻仔的链接。里面所说的POJ 3667 &nbsp;HOTEL 很像 &nbsp; […]</p>

		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=5250#respond" onclick='return addComment.moveForm("div-comment-5250", "5250", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-4969">
				<div id="div-comment-4969" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/6fd02e68bfa71a2f48be7e36639cd1ba.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn"><a href="http://www.163.com/" rel="external nofollow" class="url">nolan</a></cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4969">
			2013/08/1516:28</a>		</div>

		<p>poj3667中的变量都什么意思？<br>
lsum, rsum ,msum?<br>
看了一个下午。。。。。。都不懂，求解释啊，谢谢。</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4969,1,'nolan');">回复</a>]</p><div class="comment-childs chalt" id="comment-4978"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/3ddd0d326d736066c8b005167a2390b7.png" class="avatar avatar-32 photo" height="32" width="32"><p><cite>abbranter</cite> 回复:<br><small class="commentmetadata">八月 16th, 2013 at 15:41</small></p><p>lsum：左子树区间和；rsum：右子树的区间和；msum：节点区间的最大和；</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4978,2,'abbranter');">回复</a>]</p></div>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4969#respond" onclick='return addComment.moveForm("div-comment-4969", "4969", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4938">
				<div id="div-comment-4938" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/3ddd0d326d736066c8b005167a2390b7.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">abbranter</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4938">
			2013/08/1116:30</a>		</div>

		<p>poj2528，对于query中的if条件，如果父节点满足条件，应该是不会再查询子节点，可是如果先后输入1-10 2-6 3-8，会算出1张海报，那就错了呀，应该是三张才对？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4938,1,'abbranter');">回复</a>]</p><div class="comment-childs chalt" id="comment-4944"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/d56a7b2bed9a50c2e21900fb0a32d937.jpg" class="avatar avatar-32 photo" height="32" width="32"><p><cite>shǎ崽</cite> 回复:<br><small class="commentmetadata">八月 12th, 2013 at 14:01</small></p><p>不明白你的意思<br>
你说的这点"如果父节点满足条件，应该是不会再查询子节点"是正确的.<br>
但是你给的这个例子,2-6和3-8是会改变其父节点1-10的状态的</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4944,2,'shǎ崽');">回复</a>]</p><div class="comment-childs" id="comment-4951"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/3ddd0d326d736066c8b005167a2390b7.png" class="avatar avatar-32 photo" height="32" width="32"><p><cite>abbranter</cite> 回复:<br><small class="commentmetadata">八月 13th, 2013 at 13:37</small></p><p>那1-10是怎么回复它的状态的？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4951,3,'abbranter');">回复</a>]</p></div></div>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4938#respond" onclick='return addComment.moveForm("div-comment-4938", "4938", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-4891">
				<div id="div-comment-4891" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/3ddd0d326d736066c8b005167a2390b7.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">@NotOnlySuccess</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4891">
			2013/08/0913:01</a>		</div>

		<p>hdu1698中的pushdown操作，为什么（m-(m&gt;&gt;1））与m&gt;&gt;1互换会得到错误答案而只将m&gt;&gt;1改成（m-(m&gt;&gt;1))却不会错，两个不是一样的吗？？？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4891,1,'@NotOnlySuccess');">回复</a>]</p><div class="comment-childs chalt" id="comment-4892"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/19a922061a184c5a75cc2d6124248c3b.png" class="avatar avatar-32 photo" height="32" width="32"><p><cite>LeoHLF</cite> 回复:<br><small class="commentmetadata">八月 9th, 2013 at 13:04</small></p><p>（m-(m&gt;&gt;1) &gt;1)<br>
当m是奇数时小于，偶数时等于</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4892,2,'LeoHLF');">回复</a>]</p></div><div class="comment-childs chalt" id="comment-4899"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/d56a7b2bed9a50c2e21900fb0a32d937.jpg" class="avatar avatar-32 photo" height="32" width="32"><p><cite>shǎ崽</cite> 回复:<br><small class="commentmetadata">八月 9th, 2013 at 14:59</small></p><p>这一段写的不太好,太晦涩了,你就理解成一个左子树的长度,一个是右子树的长度吧.按自己喜欢的写法来</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4899,2,'shǎ崽');">回复</a>]</p></div>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4891#respond" onclick='return addComment.moveForm("div-comment-4891", "4891", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4890">
				<div id="div-comment-4890" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/19a922061a184c5a75cc2d6124248c3b.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">LeoHLF</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4890">
			2013/08/0911:42</a>		</div>

		<p>HH大神，2528我觉得只要把每个单位长度看两个点。<br>
长度为N个单位长度的Billboard看成从点0到点N的N+1个点再用一般的离散化方法是不是会简单点。您觉得可以吗？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4890,1,'LeoHLF');">回复</a>]</p><div class="comment-childs chalt" id="comment-4897"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/d56a7b2bed9a50c2e21900fb0a32d937.jpg" class="avatar avatar-32 photo" height="32" width="32"><p><cite>shǎ崽</cite> 回复:<br><small class="commentmetadata">八月 9th, 2013 at 14:58</small></p><p>可以试试看,我觉得行,等你好消息.</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4897,2,'shǎ崽');">回复</a>]</p></div>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4890#respond" onclick='return addComment.moveForm("div-comment-4890", "4890", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-4832">
				<div id="div-comment-4832" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/6db411f95ca975fd921c1441dfb3464e.jpg" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">darkdream</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4832">
			2013/08/0415:03</a>		</div>

		<p>HH大牛，你的poj2528的代码好像过不了，，目测maxn开小了。。</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4832,1,'darkdream');">回复</a>]</p>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4832#respond" onclick='return addComment.moveForm("div-comment-4832", "4832", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4790">
				<div id="div-comment-4790" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/a.png" class="avatar avatar-32 photo avatar-default" height="32" width="32">			<cite class="fn">hnust_xuran</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4790">
			2013/08/0209:04</a>		</div>

		<p>想问一个下PKU2528的那个hash数组，是有什么特殊用途么？</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4790,1,'hnust_xuran');">回复</a>]</p>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4790#respond" onclick='return addComment.moveForm("div-comment-4790", "4790", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-4762">
				<div id="div-comment-4762" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/266ecd3255374ab75cc4b7fb4021674a.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">Iris_HIT</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4762">
			2013/07/3109:48</a>		</div>

		<p>poj 2528题<br>
更新的时候应该是update(l , r , i , 0 , m - 1 , 1);吧?右端点最大为m-1啊<br>
query也是query(0 , m - 1 , 1);</p>
<p>是这样么?AC都是可以的..</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4762,1,'Iris_HIT');">回复</a>]</p><div class="comment-childs chalt" id="comment-4766"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/266ecd3255374ab75cc4b7fb4021674a.png" class="avatar avatar-32 photo" height="32" width="32"><p><cite>Iris_HIT</cite> 回复:<br><small class="commentmetadata">七月 31st, 2013 at 13:33</small></p><p>还有 poj3225Help with Intervals中query函数中的if (l == r) return;也是不需要的吧?叶子节点的col为-1这个情况应该是不会出现...</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4766,2,'Iris_HIT');">回复</a>]</p><div class="comment-childs" id="comment-4769"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/d56a7b2bed9a50c2e21900fb0a32d937.jpg" class="avatar avatar-32 photo" height="32" width="32"><p><cite>shǎ崽</cite> 回复:<br><small class="commentmetadata">七月 31st, 2013 at 15:31</small></p><p>You are right,已经修改了,加了一行注释<br>
感谢提出意见:)</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4769,3,'shǎ崽');">回复</a>]</p></div></div><div class="comment-childs chalt" id="comment-4768"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/d56a7b2bed9a50c2e21900fb0a32d937.jpg" class="avatar avatar-32 photo" height="32" width="32"><p><cite>shǎ崽</cite> 回复:<br><small class="commentmetadata">七月 31st, 2013 at 15:30</small></p><p>对的,m-1确实最最小边界.至于为什么m也能AC这个问题,只需要比m-1大,你试试m+1,或者m+100,只要数组足够大,都是合法的,只是后边的空间会浪费而已</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4768,2,'shǎ崽');">回复</a>]</p></div>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4762#respond" onclick='return addComment.moveForm("div-comment-4762", "4762", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4409">
				<div id="div-comment-4409" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/6bfc477f3669fcc49e15977f82123b60.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">Lisz</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4409">
			2013/07/1616:02</a>		</div>

		<p>HH牛， 求教一下<br>
Atlantis  求矩形并的这题扫描线里面 cnt 域更新的时候为什么不需要用 懒惰标记<br>
cnt 更新的时候应该是成段更新吧 。没有 pushdown 不会出问题吗</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4409,1,'Lisz');">回复</a>]</p><div class="comment-childs chalt" id="comment-4420"><img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/6bfc477f3669fcc49e15977f82123b60.png" class="avatar avatar-32 photo" height="32" width="32"><p><cite>Lisz</cite> 回复:<br><small class="commentmetadata">七月 17th, 2013 at 10:12</small></p><p>我懂了</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4420,2,'Lisz');">回复</a>]</p></div>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4409#respond" onclick='return addComment.moveForm("div-comment-4409", "4409", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-4251">
				<div id="div-comment-4251" class="comment-body">
				<div class="comment-author vcard">
			<img alt="" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/88dcf250e3acfe191e046d27f2dea881.png" class="avatar avatar-32 photo" height="32" width="32">			<cite class="fn">BMan</cite><span class="says">说道：</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-4251">
			2013/06/0315:56</a>		</div>

		<p>POJ 2528:X数组应该开4*n才对吧。当这样的时候：<br>
10000<br>
1 3<br>
5 7<br>
9 11 ....<br>
by the way,HH大牛的博客太赞了，接下来很长一段时间都打算在这里常驻学习了.</p>
<p class="thdrpy">[<a href="javascript:void(0)" onclick="movecfm(event,4251,1,'BMan');">回复</a>]</p>
		<div class="reply">
			<a class="comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/?replytocom=4251#respond" onclick='return addComment.moveForm("div-comment-4251", "4251", "respond", "978")'>回复</a>		</div>
				</div>
		</li><!-- #comment-## -->
	</ol>

	<div class="navigation">
		<div class="alignleft"><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-2/#comments">« 先前评论</a></div>
		<div class="alignright"></div>
	</div>
 


<div id="respond">

<h3>Leave a Reply</h3>

<div class="cancel-comment-reply">
	<small><a rel="nofollow" id="cancel-comment-reply-link" href="http://www.notonlysuccess.com/index.php/segment-tree-complete/#respond" style="display:none;">点击这里取消回复。</a></small>
</div>


<form action="http://www.notonlysuccess.com/success/wp-comments-post.php" method="post" id="commentform">


<p><input name="author" id="author" size="22" tabindex="1" type="text">
<label for="author"><small>Name </small></label></p>

<p><input name="email" id="email" size="22" tabindex="2" type="text">
<label for="email"><small>Mail (will not be published) </small></label></p>

<p><input name="url" id="url" size="22" tabindex="3" type="text">
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></small></p>-->

<p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" id="submit" tabindex="5" value="Submit Comment" type="submit">
<input name="comment_post_ID" value="978" id="comment_post_ID" type="hidden">
<input name="comment_parent" id="comment_parent" value="0" type="hidden">
</p>
<p style="display: none;"><input id="akismet_comment_nonce" name="akismet_comment_nonce" value="f5bc9f0dc7" type="hidden"></p><input value="" name="cl_post_title" id="cl_post_title" type="hidden"><input value="" name="cl_post_url" id="cl_post_url" type="hidden"><input value="" name="cl_prem" id="cl_prem" type="hidden"><div id="commentluv"><div id="cl_messages"></div><input id="doluv" name="doluv" checked="checked" type="checkbox"><span id="mylastpost"><img alt="CommentLuv badge" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/CL91_default.png"></span><span id="showmorespan"><img class="clarrow" id="showmore" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/down-arrow.gif" alt="显示更多文章" title="显示更多文章" style="display:none;"></span></div><div id="lastposts" style="display:none;"></div><b>注意</b>: 评论者允许使用<b>'@user空格'</b>的方式将自己的评论通知另外评论者。例如， ABC是本文的评论者之一，则使用'@ABC '(不包括单引号)将会自动将您的评论发送给ABC。使用'@all '，将会将评论发送给之前所有其它评论者。请务必注意user必须和评论者名相匹配(大小写一致)。<p><input id="comment_reply_ID" name="comment_reply_ID" value="0" type="hidden"><input id="comment_reply_dp" name="comment_reply_dp" value="0" type="hidden"></p><div id="cancel_reply" style="display:none;"><a href="javascript:void(0)" onclick="movecfm(null,0,1,null);" style="color:red;">点击取消回复</a></div><p><input name="comment_mail_notify" id="comment_mail_notify" value="comment_mail_notify" checked="checked" style="width: auto;" type="checkbox"><label for="comment_mail_notify" style="display: inline;">有人回复时邮件通知我</label></p><script type="text/javascript">
/* <![CDATA[ */
var commentformid = "commentform";
var USERINFO = false;
var atreply = "none";
/* ]]> */
</script>
<script type="text/javascript" src="%E3%80%90%E5%AE%8C%E5%85%A8%E7%89%88%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%20%C2%AB%20NotOnlySuccess_files/wp-thread-comment.htm"></script>

</form>

</div>


	
	</div>


	<div id="sidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2><form role="search" method="get" id="searchform" class="searchform" action="http://www.notonlysuccess.com/">
				<div>
					<label class="screen-reader-text" for="s">搜索：</label>
					<input name="s" id="s" type="text">
					<input id="searchsubmit" value="搜索" type="submit">
				</div>
			</form></li><!-- Wordpress Popular Posts Plugin v2.3.7 [W] [daily] [views] [regular] -->
<li id="wpp-2" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2><ul class="wpp-list">
<li><a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/" title="【完全版】线段树" class="wpp-post-title" target="_self">【完全版】线段树</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/rocky-mountain-regional-contest-2009solution/" title="Rocky Mountain Regional Contest 2009(Solution)" class="wpp-post-title" target="_self">Rocky Mountain Regional Contest 2009(Solution)</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/tankwar_final/" title="【Astar】坦克大战.final" class="wpp-post-title" target="_self">【Astar】坦克大战.final</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/aho-corasick-automaton/" title="【专辑】AC自动机" class="wpp-post-title" target="_self">【专辑】AC自动机</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/splay-tree/" title="无比强大的数据结构splay-tree" class="wpp-post-title" target="_self">无比强大的数据结构splay-tree</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/segment-tree/" title="线段树专辑" class="wpp-post-title" target="_self">线段树专辑</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/dp_optimize/" title="【专辑】单调队列+斜率优化的DP" class="wpp-post-title" target="_self">【专辑】单调队列+斜率优化的DP</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/a_hard_problem/" title="一道难题" class="wpp-post-title" target="_self">一道难题</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/divide-tree/" title="第k元素log(n)算法--划分树" class="wpp-post-title" target="_self">第k元素log(n)算法--划分树</a> <span class="post-stats"></span></li>
<li><a href="http://www.notonlysuccess.com/index.php/zhejiang-programing-test/" title="省赛" class="wpp-post-title" target="_self">省赛</a> <span class="post-stats"></span></li>

</ul>
</li>
<!-- End Wordpress Popular Posts Plugin v2.3.7 -->
		<li id="recent-posts-3" class="widget widget_recent_entries">		<h2 class="widgettitle">近期文章</h2>		<ul>
					<li>
				<a href="http://www.notonlysuccess.com/index.php/a_hard_problem/" title="一道难题">一道难题</a>
						</li>
					<li>
				<a href="http://www.notonlysuccess.com/index.php/story-4/" title="江湖故事(四)">江湖故事(四)</a>
						</li>
					<li>
				<a href="http://www.notonlysuccess.com/index.php/marathon/" title="当我跑步的时候,我在想些什么">当我跑步的时候,我在想些什么</a>
						</li>
					<li>
				<a href="http://www.notonlysuccess.com/index.php/real/" title="REAL">REAL</a>
						</li>
					<li>
				<a href="http://www.notonlysuccess.com/index.php/story-3/" title="江湖故事(三)">江湖故事(三)</a>
						</li>
				</ul>
		</li><li id="recent-comments-2" class="widget widget_recent_comments"><h2 class="widgettitle">近期评论</h2><ul id="recentcomments"><li class="recentcomments"><a href="http://sharkfly.diandian.com/" rel="external nofollow" class="url">- -</a>发表在《<a href="http://www.notonlysuccess.com/index.php/story-4/comment-page-1/#comment-5386">江湖故事(四)</a>》</li><li class="recentcomments"><a href="http://www.djpartyaddict.com/guestbook" rel="external nofollow" class="url">symantec</a>发表在《<a href="http://www.notonlysuccess.com/index.php/story-4/comment-page-1/#comment-5380">江湖故事(四)</a>》</li><li class="recentcomments"><a href="http://www.kaifazhe.com/programming/390781.html" rel="external nofollow" class="url">线段树练习_入门 - 编程 - 开发者</a>发表在《<a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5337">【完全版】线段树</a>》</li><li class="recentcomments"><a href="http://energycen.com/2012/07/23/ac%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e7%ba%bf%e6%ae%b5%e6%a0%91-hdu1166-%e6%95%8c%e5%85%b5%e5%b8%83%e9%98%b5/" rel="external nofollow" class="url">AC的第一个线段树 HDU1166 敌兵布阵</a>发表在《<a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5336">【完全版】线段树</a>》</li><li class="recentcomments"><a href="http://energycen.com/2012/07/25/poj-3225-help-with-intervals-%e7%ba%bf%e6%ae%b5%e6%a0%91-%e9%9b%86%e5%90%88%e7%9a%84%e4%ba%a4%e5%b9%b6%e5%b7%ae%e8%a1%a5%e8%bf%90%e7%ae%97/" rel="external nofollow" class="url">poj 3225 Help with Intervals 线段树 集合的交并差补运算</a>发表在《<a href="http://www.notonlysuccess.com/index.php/segment-tree-complete/comment-page-3/#comment-5335">【完全版】线段树</a>》</li></ul></li><li id="meta-3" class="widget widget_meta"><h2 class="widgettitle">功能</h2>			<ul>
						<li><a href="http://www.notonlysuccess.com/success/wp-login.php">登录</a></li>
			<li><a href="http://www.notonlysuccess.com/index.php/feed/" title="使用RSS 2.0订阅本站点内容">文章<abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://www.notonlysuccess.com/index.php/comments/feed/" title="使用RSS订阅本站点的所有文章的近期评论">评论<abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://cn.wordpress.org/" title="基于WordPress，一个优美、先进的个人信息发布平台。">WordPress.org</a></li>						</ul>
</li>		</ul>
	</div>



<hr>

<div id="footer">
<!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->
	<p>Powered by <a href="http://wordpress.org/">WordPress</a> | 
    <a href="http://www.notonlysuccess.com/index.php/feed/">Entries (RSS)</a> | 
    <a href="http://www.notonlysuccess.com/index.php/comments/feed/">Comments (RSS)</a> |
    Template by <a href="http://www.mbwebdesign.co.uk/">MB Web Design</a>
		<!-- 253 queries. 1.405 seconds. -->
	</p>
</div>

</div>


</div><!-- End of Wrapper -->

<span id="heart_tip_big" style="display: none;position:absolute; z-index: 1001; background-color: white; color: null; width: 62px;"></span></body></html>